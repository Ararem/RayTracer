using RayTracer.Core.Scenes;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.PixelFormats;
using System.Numerics;

namespace RayTracer.Core.Graphics;

/// <summary>
///  Static class for rendering a <see cref="Scene"/>, using it's <see cref="Scene.Camera"/>.
/// </summary>
/// <remarks>
///  Uses the rays generated by the <see cref="Camera"/>, and objects in the <see cref="Scene"/> to create the output image
/// </remarks>
public static class Renderer
{
	public static Image<Rgb24> Render(Scene scene)
	{
		(_, Camera cam, SceneObject[] objects) = scene;
		Image<Rgb24>  image       = new(cam.Width, cam.Height);
		for (int x = 0; x < image.Width; x++)
		{
			for (int y = 0; y < image.Height; y++)
			{
				Ray   r = cam.GetRay(new Vector2((float)x / image.Width, (float)y / image.Height));
				float t = 0.5f * (r.Direction.Y + 1);
				image[x, y] = new Rgb24(ToByte((1 - t) + (0.5f * t)), ToByte((1 - t) + (0.7f * t)), ToByte((1 - t) + (1f * t)));
			}
		}

		return image;
	}

	public static byte ToByte(this float f) => (byte)(255f * f);
}